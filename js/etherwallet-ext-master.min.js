var PrivKey = "";
var SavedAccounts = [];
var numBalanceReq = 0
var wallets = [];

$(document).ready(function() {
	bindElements();
	checkAndLoadPageHash();
})

function checkAndLoadPageHash() {
	if (window.location.hash) {
		var phash = window.location.hash.substr(1);
		$(".ptabs").each(function(index) {
			if ($(this).attr('id') == phash) {
				paneNavigate($(this).attr('showId'), this.id);
			}
		});
	}
}

function paneNavigate(showEleId, activeEleId) {
	location.hash = activeEleId;
	onTabOpen(activeEleId);
	$('html,body').scrollTop(0);	
}

function onTabOpen(tabid) {
	if (tabid == 'add-wallet') {
		setAccounts();
	}
}

function setAccounts() {
	getAllAccounts(function(data) {
		SavedAccounts = data;
	});
}

var storage = chrome.storage.sync;
function getAllAccounts(callback){
    var accounts = [];
    storage.get(null, function(items) {
        for (var key in items) {
            if (items.hasOwnProperty(key)) {
                var tobj = JSON.parse(items[key]);
                if(tobj.type=='wallet')
                accounts.push(key);
            }
        }
        callback(accounts);
    });
}

function bindElements() {
	$(".content_2").hide();

	$("#generateNewWallet").click(function() {
		generateSingleWallet();
	});
	$("#wallets").click(function () {
		reloadMainPageWallets();
		$(".content").hide();
		$(".content_2").show();
	})

	$('.back').click(function () {
		$(".content").show();
		$(".content_2").hide();
	})
}

function generateSingleWallet() {
	var password = $("#seedPhrase_input").val();
	if (password == "") {
		$("#generatedWallet").html(getErrorText("You must enter a phrase.")).fadeIn(50).fadeOut(3000);
	} else {
		var acc = new Accounts();
		var newAccount = acc.new();
		var address = newAccount.address;
		var encprivkey = encryptPrivKey(newAccount.private, password);
		addWalletToStorage(address, encprivkey, function() {
			if (chrome.runtime.lastError) {
				$("#generatedWallet").html(getErrorText(chrome.runtime.lastError.message)).fadeIn(50).fadeOut(3000);
			} else {
				$("#generatedWallet").html(getSuccessText("New Wallet Generated!")).fadeIn(50).fadeOut(5000);
			}
		});
		acc.clear();
	}
}

function encryptPrivKey(privkey, password) {
	var genAdd = formatAddress(strPrivateKeyToAddress(privkey), 'hex');
	var addressHash = cryptoJSToHex(CryptoJS.SHA3(genAdd));
	addressHash = addressHash.substr(addressHash.length - 4);
	privkey = CryptoJS.AES.encrypt(privkey, password).toString();
	privkey = privkey + addressHash;
	return privkey;
}

function formatAddress(addr, format) {
	if (addr.substr(0, 2) == '0x' && format == 'raw') addr = addr.substr(2);
	if (addr.substr(0, 2) != '0x' && format == 'hex') addr = '0x' + addr;
	return addr;
}

function strPrivateKeyToAddress(privkey) {
	var public = ethUtil.privateToPublic(hexToBytes(privkey));
	return ethUtil.publicToAddress(public).toString('hex');
}

function hexToBytes(hex) {
	for (var bytes = [], c = 0; c < hex.length; c += 2)
	bytes.push(parseInt(hex.substr(c, 2), 16));
	return bytes;
}

function cryptoJSToHex(x) {
	return CryptoJS.enc.Hex.stringify(x);
}

function addWalletToStorage(address, encprivkey, callback){
    var value = {priv:encprivkey, type:'wallet'};
    var keyname = address;
    var obj= {};
    obj[keyname] = JSON.stringify(value);
    storage.set(obj,callback);
}

function reloadMainPageWallets() {
    numBalanceReq = 0;

	getWalletsArr(function(wallets) {
		$("#tblwalletsmain > tbody").empty();
		for (var i = 0; i < wallets.length; i++) {
			var cobj = wallets[i];
			var tblRow = getMainPageWalletRow(i + 1, cobj.addr);
			$("#tblwalletsmain > tbody").append(tblRow);
		}
		addEditEvents();
	});

	wallets = [];

}

function getWalletsArr(callback){
    getStorageArr('wallet',callback);
}

function getStorageArr(filter, callback){

    storage.get(null, function(items) {
        for (var key in items) {
            if (items.hasOwnProperty(key)) {
                var tobj = JSON.parse(items[key]);
                if(tobj.type==filter){
                   tobj['addr']=key;
                   wallets.push(tobj);
                }
            }
        }
        callback(wallets);
    });
}

function getMainPageWalletRow(id, address){
    address = toChecksumAddress(address);
    var str = "<tr>\
              <td class='address' id=\"accountAddressMainTbl-"+id+"\">"+address+"</td>\
			  <td> <i deleteVal='"+id+"' class='fa fa-times remove-icons mainWalletDelete text-danger'></i> </td>\
            </tr>";
    return str;
}

function toChecksumAddress(address) { 
    if (typeof address === 'undefined') return '';
    address = address.toLowerCase().replace('0x','');
    var addressHash = ethUtil.sha3(address).toString('hex');
    var checksumAddress = '0x';
    for (var i = 0; i < address.length; i++ )
        checksumAddress += parseInt(addressHash[i], 16) > 7 ? address[i].toUpperCase() : address[i];
    return checksumAddress;
};

function addEditEvents() {
	$(".mainWalletDelete").click(function() {
		var deleteVal = $(this).attr('deleteVal');
		var walAddress = $("#accountAddressMainTbl-" + deleteVal).html();
		var ethAccAddress = walAddress.toLowerCase();
		deleteAccount(ethAccAddress, function() {
			reloadMainPageWallets();
		});
	});
}

function deleteAccount(address,callback){
    storage.remove(address,function(){
        callback(address);
    });
}

function getErrorText(err) {
	return '<p class="text-center text-danger"><strong> ' + err + '</strong></p>';
}

function getSuccessText(text) {
	return '<p class="text-center text-success"><strong> ' + text + '</strong></p>';
}
